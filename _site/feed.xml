<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-08T15:58:54+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">不积跬步，无以至千里</title><subtitle>全栈开发，前端技术，Java后台开发，Linux，大数据，数据库</subtitle><author><name>chenqy9</name><email>chenqy9@foxmail.com</email></author><entry><title type="html">Linux安装升级jenkins</title><link href="http://localhost:4000/%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/linux-jenkins-install-yum/" rel="alternate" type="text/html" title="Linux安装升级jenkins" /><published>2019-01-08T00:00:00+08:00</published><updated>2019-01-08T00:00:00+08:00</updated><id>http://localhost:4000/%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/linux-jenkins-install-yum</id><content type="html" xml:base="http://localhost:4000/%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/linux-jenkins-install-yum/">&lt;h2 id=&quot;本文介绍在centos操作系统下通过yum安装jenkins并通过下载官方war包的方式升级&quot;&gt;本文介绍在centos操作系统下通过yum安装jenkins，并通过下载官方war包的方式升级。&lt;/h2&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装JDK&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装Jenkins&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 如果没安装wget，可先安装或用curl&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; wget

&lt;span class=&quot;c&quot;&gt;# 添加Jenkins库到yum库&lt;/span&gt;
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo

rpm &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; https://jenkins-ci.org/redhat/jenkins-ci.org.key

yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动Jenkins服务&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 启动Jenkins&lt;/span&gt;
service jenkins start

&lt;span class=&quot;c&quot;&gt;# 停止Jenkins&lt;/span&gt;
service jenkins stop

&lt;span class=&quot;c&quot;&gt;# 重启Jenkins&lt;/span&gt;
service jenkins restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意事项&lt;/p&gt;

    &lt;p&gt;Jenkins默认端口是8080，确保此端口不被占用或者修改Jenkins的默认端口，打开防火墙对该端口的拦截。&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 配置Jenkis的端口， 修改JENKINS_PORT=&quot;8080&quot;为目标端口&lt;/span&gt;
vi /etc/sysconfig/jenkins

&lt;span class=&quot;c&quot;&gt;# 开启防火墙端口&lt;/span&gt;
firewall-cmd &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;public &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8080/tcp &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重启Jenkins服务&lt;/span&gt;
service jenkins restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;升级&quot;&gt;升级&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载官升升级war包，scp到目标服务器&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ~/Downloads/jenkins.war user@ip:/usr/lib/jenkins/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看Jenkins服务启动的安装包位置&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 可以看到包的位置在/usr/lib/jenkins/jenkins.war&lt;/span&gt;
ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;jenkins

&lt;span class=&quot;c&quot;&gt;# 用升级war包替换旧的安装包，重启Jenkins服务&lt;/span&gt;
service jenkins stop
service jenkins start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>chenqy9</name><email>chenqy9@foxmail.com</email></author><category term="jenkins" /><category term="linuxÂ" /><category term="yum" /><summary type="html">本文介绍在centos操作系统下通过yum安装jenkins，并通过下载官方war包的方式升级。</summary></entry><entry><title type="html">Linux离线安装node</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/linux-node-install/" rel="alternate" type="text/html" title="Linux离线安装node" /><published>2019-01-03T00:00:00+08:00</published><updated>2019-01-03T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/linux-node-install</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/linux-node-install/">&lt;p&gt;本文介绍如何在Linux 64位系统上通过二进制压缩文件离线安装安装node。&lt;/p&gt;

&lt;p&gt;1、 到&lt;a href=&quot;https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz&quot;&gt;官网&lt;/a&gt;下载安装包，并scp上传到目标服务器。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; ~/Downloads/node-v10.15.0-linux-x64.tar.xz user@host:path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、将二进制存档解压缩到您要安装Node的任何目录，我使用/usr/ local/lib/nodejs&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;v10.15.0
&lt;span class=&quot;nv&quot;&gt;DISTRO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux-x64
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /usr/local/lib/nodejs
&lt;span class=&quot;nb&quot;&gt;sudo tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xJvf&lt;/span&gt; node-&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;-&lt;span class=&quot;nv&quot;&gt;$DISTRO&lt;/span&gt;.tar.xz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /usr/local/lib/nodejs
&lt;span class=&quot;nb&quot;&gt;sudo mv&lt;/span&gt; /usr/local/lib/nodejs/node-&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;-&lt;span class=&quot;nv&quot;&gt;$DISTRO&lt;/span&gt; /usr/local/lib/nodejs/node-&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3、设置环境变量vim /etc/profile，将下面代码添加到文件最后&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nodejs&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NODEJS_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/lib/nodejs/node-&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;/bin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NODEJS_HOME&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4、刷新文件配置&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5、测试安装&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
npm version
npx &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正常输出是：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
v10.15.0
npm version
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; npm: &lt;span class=&quot;s1&quot;&gt;'6.4.1'&lt;/span&gt;,
  ares: &lt;span class=&quot;s1&quot;&gt;'1.15.0'&lt;/span&gt;,
  cldr: &lt;span class=&quot;s1&quot;&gt;'33.1'&lt;/span&gt;,
  http_parser: &lt;span class=&quot;s1&quot;&gt;'2.8.0'&lt;/span&gt;,
  icu: &lt;span class=&quot;s1&quot;&gt;'62.1'&lt;/span&gt;,
  modules: &lt;span class=&quot;s1&quot;&gt;'64'&lt;/span&gt;,
  napi: &lt;span class=&quot;s1&quot;&gt;'3'&lt;/span&gt;,
  nghttp2: &lt;span class=&quot;s1&quot;&gt;'1.34.0'&lt;/span&gt;,
  node: &lt;span class=&quot;s1&quot;&gt;'10.15.0'&lt;/span&gt;,
  openssl: &lt;span class=&quot;s1&quot;&gt;'1.1.0j'&lt;/span&gt;,
  tz: &lt;span class=&quot;s1&quot;&gt;'2018e'&lt;/span&gt;,
  unicode: &lt;span class=&quot;s1&quot;&gt;'11.0'&lt;/span&gt;,
  uv: &lt;span class=&quot;s1&quot;&gt;'1.23.2'&lt;/span&gt;,
  v8: &lt;span class=&quot;s1&quot;&gt;'6.8.275.32-node.45'&lt;/span&gt;,
  zlib: &lt;span class=&quot;s1&quot;&gt;'1.2.11'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建sudo链接：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/lib/nodejs/node-&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;/bin/node /usr/bin/node

&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/lib/nodejs/node-&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;/bin/npm /usr/bin/npm

&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/lib/nodejs/node-&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;/bin/npx /usr/bin/npx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>chenqy9</name><email>chenqy9@foxmail.com</email></author><category term="node" /><category term="linux" /><summary type="html">本文介绍如何在Linux 64位系统上通过二进制压缩文件离线安装安装node。</summary></entry><entry><title type="html">Linux离线安装yarn和配置离线仓库</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/linux-yarn-install-offline/" rel="alternate" type="text/html" title="Linux离线安装yarn和配置离线仓库" /><published>2019-01-03T00:00:00+08:00</published><updated>2019-01-03T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/linux-yarn-install-offline</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/linux-yarn-install-offline/">&lt;p&gt;yarn是Facebook团队开发的快速、可靠、安全的依赖管理工具。相比于npm包管理工具，yarn的离线模式更适用于在没有网络链接的情况下进行项目依赖安装及构建。&lt;/p&gt;

&lt;h2 id=&quot;优势&quot;&gt;优势&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;极其快速&lt;/strong&gt;&lt;br /&gt;
Yarn 会缓存它下载的每个包，所以无需重复下载。它还能并行化操作以最大化资源利用率，安装速度之快前所未有。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;特别安全&lt;/strong&gt;&lt;br /&gt;
Yarn会在每个安装包被执行前校验其完整性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;超级可靠&lt;/strong&gt;&lt;br /&gt;
Yarn 使用格式详尽而又简洁的 lockfile文件 和确定性算法来安装依赖，能够保证在一个系统上的运行的安装过程也会以同样的方式运行在其他系统上。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;特点&quot;&gt;特点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;离线模式&lt;/strong&gt;&lt;br /&gt;
如果你之前安装过某个包，你就可以在没有网络连接的情况下再次安装它。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;确定性&lt;/strong&gt;&lt;br /&gt;
不管是什么顺序，在不同的机器上的依赖会以同一方式安装。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;网络性能&lt;/strong&gt;&lt;br /&gt;
Yarn可以高效地队列化请求并且避免请求瀑布化，使网络利用率最大化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;相同的软件包&lt;/strong&gt;&lt;br /&gt;
从 npm 安装软件包并使用相同的包管理流程。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;网络适应&lt;/strong&gt;&lt;br /&gt;
单个请求失败不会导致安装失败，请求失败时会重试。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;扁平模式&lt;/strong&gt;&lt;br /&gt;
解析不匹配的依赖版本为一个单一的版本来避免导致多个版本。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装yarn&quot;&gt;安装yarn&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;从&lt;a href=&quot;https://yarnpkg.com/latest.tar.gz&quot;&gt;官网&lt;/a&gt;下载源码包并上传到目标服务器&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; ~/Downloads/yarn-v1.12.3.tar.gz user@host:path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解压程序包到目标目录&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zvxf yarn-v1.12.3.tar.gz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置环境变量vim /etc/profile，将下面代码添加到文件最后&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NODEJS_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/yarn-v1.12.3/bin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NODEJS_HOME&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;刷新文件配置&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运行命令来测试 Yarn 是否安装：&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h2 id=&quot;配置离线镜像&quot;&gt;配置离线镜像&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先我们需要设置一个目录作为我们的“离线镜像”存储，我们可以使用yarn config命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;yarn-offline-mirror ./npm-packages-offline-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;./npm-packages-offline-cache是​​相对于主文件夹的示例位置，其中所有source.tar.gz文件将从注册表下载。&lt;/p&gt;

&lt;p&gt;脱机镜像不会删除tar包。为了使缓存文件夹保持最新，您需要将以下内容添加到配置文件中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;yarn-offline-mirror-pruning &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如何测试以确保它处于脱机状态？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用“yarn cache clean”清除全局缓存&lt;/li&gt;
  &lt;li&gt;关掉wifi&lt;/li&gt;
  &lt;li&gt;运行“yarn install -offline”。离线标志将确保yarn不会到达网络&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简而言之，要为您的项目启用“离线镜像”，您需要：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将“yarn-offline-mirror”配置添加到.yarnrc文件中&lt;/li&gt;
  &lt;li&gt;使用“yarn install”命令生成一个新的yarn.lock&lt;/li&gt;
&lt;/ul&gt;</content><author><name>chenqy9</name><email>chenqy9@foxmail.com</email></author><category term="linux" /><category term="yarn" /><summary type="html">yarn是Facebook团队开发的快速、可靠、安全的依赖管理工具。相比于npm包管理工具，yarn的离线模式更适用于在没有网络链接的情况下进行项目依赖安装及构建。</summary></entry><entry><title type="html">CAS安装</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/cas-install/" rel="alternate" type="text/html" title="CAS安装" /><published>2018-12-30T00:00:00+08:00</published><updated>2018-12-30T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/cas-install</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/cas-install/">&lt;p&gt;CAS安装是一个基本的面向源的过程，我们建议使用&lt;a href=&quot;http://maven.apache.org/plugins/maven-war-plugin/overlays.html&quot;&gt;WAR overlay&lt;/a&gt;项目来组织自定义，例如组件配置和UI设计。 WAR覆盖构建的输出是一个cas.war文件，可以部署在像&lt;a href=&quot;http://tomcat.apache.org/whichversion.html&quot;&gt;Tomcat&lt;/a&gt;这样的Java servlet容器上。&lt;/p&gt;

&lt;p&gt;WAR overlay项目提供参考和研究。&lt;/p&gt;

&lt;h3 id=&quot;gradle&quot;&gt;Gradle&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apereo/cas-gradle-overlay-template/tree/4.2&quot;&gt;CAS Gradle Overlay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;maven&quot;&gt;Maven&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apereo/cas-overlay-template/tree/4.2&quot;&gt;CAS Maven Overlay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CAS使用Spring Webflow以模块化和可配置的方式驱动登录过程; login-webflow.xml文件包含流中状态和转换的简单描述。自定义此文件可能是Spring XML配置文件中除组件配置之外最常见的配置问题。有关各种CAS流程的详细说明以及常见配置点的讨论，请参见“Spring Webflow自定义指南”。&lt;/p&gt;

&lt;h3 id=&quot;spring-配置&quot;&gt;Spring 配置&lt;/h3&gt;

&lt;p&gt;CAS服务器在很大程度上依赖于Spring框架。 spring-configuration目录下有精确和特定的XML配置文件，用于控制CAS的各种属性以及cas-servlet.xml和deployerConfigContext.xml，后者主要是CAS采用者希望将其包含在环境覆盖中 - 特定的CAS设置。&lt;/p&gt;

&lt;p&gt;如果需要通过Maven覆盖过程，可以覆盖XML配置文件中的Spring bean以更改行为。有两种方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;XML文件可以从CAS版本的源获得，并在Maven重叠版本中以相同的名称放置在相同的确切路径上。如果配置正确，则构建将使用本地提供的XML文件而不是默认值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAS服务器能够加载XML配置文件的模式以覆盖默认提供的内容。打算否决CAS默认行为的这些配置文件可以放在/ WEB-INF /中，并且必须使用以下模式命名：cas-servlet - * .xml。放在此文件中的Bean将覆盖其他文件。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>chenqy9</name><email>chenqy9@foxmail.com</email></author><category term="CAS" /><category term="单点登录" /><category term="安装" /><summary type="html">CAS安装是一个基本的面向源的过程，我们建议使用WAR overlay项目来组织自定义，例如组件配置和UI设计。 WAR覆盖构建的输出是一个cas.war文件，可以部署在像Tomcat这样的Java servlet容器上。</summary></entry><entry><title type="html">基于Jekyll和GitHub Pages搭建个人博客</title><link href="http://localhost:4000/%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/build-blog-with-jekyll-and-github-pages/" rel="alternate" type="text/html" title="基于Jekyll和GitHub Pages搭建个人博客" /><published>2018-12-29T00:00:00+08:00</published><updated>2018-12-29T00:00:00+08:00</updated><id>http://localhost:4000/%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/build-blog-with-jekyll-and-github-pages</id><content type="html" xml:base="http://localhost:4000/%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/build-blog-with-jekyll-and-github-pages/">&lt;h2 id=&quot;本文介绍如何利用jekyll创建一个静态站点并托管到github-pages上&quot;&gt;本文介绍如何利用Jekyll创建一个静态站点，并托管到GitHub Pages上。&lt;/h2&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;JeKyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;JeKyll&lt;/a&gt;是一个基于Ruby的博客类静态网站生成器。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll是一个简单，可扩展的静态站点生成器。您可以使用自己喜欢的标记语言编写文本，然后通过布局来创建静态网站。在整个过程中，您可以调整网站URL的显示方式，布局中显示的数据等&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;基于jekyll创建静态网站&quot;&gt;基于JeKyll创建静态网站&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;安装Ruby开发环境&lt;/a&gt; (&lt;a href=&quot;https://jekyllrb.com/docs/installation/macos/&quot;&gt;以macOS 为例&lt;/a&gt;) &lt;strong&gt;&lt;em&gt;macOS Mojave 10.14 可省略以下安装步骤&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;1.1 安装Homebrew和Ruby&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;# Install Homebrew&lt;/span&gt;
 /usr/bin/ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

 brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;1.2 导出Ruby环境变量&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=/usr/local/opt/ruby/bin:$PATH'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;1.3 检查Ruby是否安装成功&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; which ruby
 /usr/local/opt/ruby/bin/ruby
 ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
 ruby 2.6.0p0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2018-12-25 revision 66547&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin18]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装打包器和jekyll&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; gem &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user-install&lt;/span&gt; bundler jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个新的Jekyll网站&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; jekyll new myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;若提示 &lt;em&gt;command not found: jekyll&lt;/em&gt; ，需要把gem路径配置到PATH里面&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译网站并启动本地服务&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;访问&lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;查看效果&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;是直接从GitHub仓库托管的个人网站和项目网站。&lt;/p&gt;

&lt;h3 id=&quot;基于github-pages托管网站&quot;&gt;基于GitHub Pages托管网站&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个仓库&lt;br /&gt;
  前往&lt;a href=&quot;https://github.com/&quot;&gt;GitHUb&lt;/a&gt;创建一个新的仓库，仓库名称为&lt;em&gt;username.github.io&lt;/em&gt;，其中&lt;em&gt;username&lt;/em&gt;是你的GitHub用户名或者组织名称。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;克隆仓库&lt;br /&gt;
把步骤一创建的仓库克隆到本地。&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git clone https://github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建第一个页面&lt;br /&gt;
进入项目目录，新建一个index.html的文件。&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;username.github.io
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;推送到远程仓库&lt;br /&gt;
增加、提交和推送你的更改&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git add &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;初始提交&quot;&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你已经成功完成&lt;br /&gt;
访问&lt;a href=&quot;https://username.github.io&quot;&gt;&lt;em&gt;https://username.github.io&lt;/em&gt;&lt;/a&gt;查看效果&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;整合部署&quot;&gt;整合部署&lt;/h2&gt;

&lt;p&gt;将Jekyll生成的静态网站复制到username.github.io仓库并提交推送到GitHub&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; myblog/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; username.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;后面直接修改仓库文件，用Jekyll编译提交即可。&lt;/p&gt;</content><author><name>chenqy9</name><email>chenqy9@foxmail.com</email></author><category term="博客" /><category term="Jekyll" /><category term="GitHub Pages" /><category term="markdown" /><summary type="html">本文介绍如何利用Jekyll创建一个静态站点，并托管到GitHub Pages上。</summary></entry><entry><title type="html">CAS入门</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/learn-about-cas/" rel="alternate" type="text/html" title="CAS入门" /><published>2018-12-29T00:00:00+08:00</published><updated>2018-12-29T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/learn-about-cas</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/learn-about-cas/">&lt;p&gt;企业单点登录 - CAS提供友好的开源社区，积极支持并为项目做出贡献。虽然该项目植根于高级开放源代码，但它已发展成为跨越财富500强企业和小型专用设备的国际受众。&lt;/p&gt;

&lt;p&gt;CAS为Web提供企业单点登录服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开放且文档齐全的协议开源&lt;/li&gt;
  &lt;li&gt;Java服务器组件&lt;/li&gt;
  &lt;li&gt;可插入的身份验证支持（LDAP，数据库，X.509,2-factor）&lt;/li&gt;
  &lt;li&gt;支持多种协议（CAS，SAML） ，OAuth，OpenID）Java，.Net，PHP，Perl，Apache，uPortal和其他&lt;/li&gt;
  &lt;li&gt;客户端库集成了uPortal，BlueSocket，TikiWiki，Mule，Liferay，Moodle等&lt;/li&gt;
  &lt;li&gt;社区文档和实现支持广泛的采用者社区&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;资源链接&quot;&gt;资源链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apereo.org/projects/cas&quot;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/index.html&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apereo/cas&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;架构&quot;&gt;架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://apereo.github.io/cas/4.2.x/images/cas_architecture.png&quot; alt=&quot;cas架构图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cas服务器&quot;&gt;CAS服务器&lt;/h3&gt;

&lt;p&gt;CAS服务器是基于Spring Framework构建的Java servlet，其主要职责是通过颁发和验证票证来对用户进行身份验证并授予对启用CAS的服务（通常称为CAS客户端）的访问权限。当服务器在成功登录后向用户发出票证授予票证（TGT）时，将创建SSO会话。使用TGT作为令牌，通过浏览器重定向，根据用户的请求向服务发出服务票据（ST）。随后通过反向信道通信在CAS服务器上验证ST。&lt;/p&gt;

&lt;h3 id=&quot;cas客户端&quot;&gt;CAS客户端&lt;/h3&gt;

&lt;p&gt;术语“CAS客户端”在其通用使用中具有两个不同的含义。 CAS客户端是任何启用CAS的应用程序，可以通过支持的协议与服务器通信。 CAS客户端也是可以与各种软件平台和应用程序集成的软件包，以便通过某种认证协议（例如CAS，SAML，OAuth）与CAS服务器通信。已经开发了支持许多软件平台和产品的CAS客户。&lt;/p&gt;

&lt;p&gt;平台：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache httpd Server (&lt;a href=&quot;https://github.com/Jasig/mod_auth_cas&quot;&gt;mod_auth_cas module&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Java (&lt;a href=&quot;https://github.com/apereo/java-cas-client&quot;&gt;Java CAS Client&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;.NET (&lt;a href=&quot;https://github.com/apereo/dotnet-cas-client&quot;&gt;.NET CAS Client&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;PHP (phpCAS)&lt;/li&gt;
  &lt;li&gt;Perl (PerlCAS)&lt;/li&gt;
  &lt;li&gt;Python (pycas)&lt;/li&gt;
  &lt;li&gt;Ruby (rubycas-client)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;应用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Outlook Web Application (ClearPass + .NET CAS Client)&lt;/li&gt;
  &lt;li&gt;Atlassian Confluence&lt;/li&gt;
  &lt;li&gt;Atlassian JIRA&lt;/li&gt;
  &lt;li&gt;Drupal&lt;/li&gt;
  &lt;li&gt;Liferay&lt;/li&gt;
  &lt;li&gt;uPortal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;协议&quot;&gt;协议&lt;/h3&gt;

&lt;p&gt;客户端通过几种支持的协议与服务器通信。所有支持的协议在概念上都是相似的，但有些协议具有使其适用于特定应用程序或用例的特征或特征。例如，CAS协议支持委托（代理）身份验证，SAML协议支持属性释放和单点注销。&lt;/p&gt;

&lt;p&gt;支持的协议：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/protocol/CAS-Protocol.htmlv&quot;&gt;CAS (versions 1, 2, and 3)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/protocol/SAML-Protocol.html&quot;&gt;SAML 1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/protocol/OpenID-Protocol.html&quot;&gt;OpenID&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/protocol/OAuth-Protocol.html&quot;&gt;OAuth (1.0, 2.0)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;组件&quot;&gt;组件&lt;/h3&gt;

&lt;p&gt;根据三层子系统描述CAS服务器是很有帮助的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web (Spring MVC/Spring Webflow)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/installation/Configuring-Ticketing-Components.html&quot;&gt;Ticketing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/installation/Configuring-Authentication-Components.html&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;几乎所有部署注意事项和组件配置都涉及这三个子系统。 Web层是与包括CAS客户端在内的所有外部系统进行通信的端点。 Web层委托票务子系统生成CAS客户端访问的票证。 SSO会话开始于成功验证时发出票证授予票证，因此票务子系统经常委托给验证子系统。&lt;/p&gt;

&lt;p&gt;认证系统通常仅在SSO会话开始时处理请求，尽管存在可以调用它的其他情况（例如，强制认证）。&lt;/p&gt;

&lt;h3 id=&quot;spring-框架&quot;&gt;Spring 框架&lt;/h3&gt;

&lt;p&gt;CAS使用Spring Framework的许多方面;最值得注意的是，Spring MVC和Spring Webflow。 Spring为核心CAS代码库以及部署者提供了完整且可扩展的框架;通过挂钩CAS和Spring API扩展点，可以直接定制或扩展CAS行为。 Spring的一般知识有助于理解某些框架组件之间的相互作用，但并不是严格要求的。但是，用于配置CAS和Spring组件的基于XML的配置是安装，定制和扩展的核心问题。通常使用XML的能力和特别是Spring IOC容器是CAS安装的先决条件。&lt;/p&gt;

&lt;h2 id=&quot;安装要求&quot;&gt;安装要求&lt;/h2&gt;

&lt;p&gt;要求概览：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.java.com/&quot;&gt;Java&lt;/a&gt; &amp;gt;=1.7&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;支持servlet规范的Servlet容器&lt;/a&gt; &amp;gt;=3.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://maven.apache.org/&quot;&gt;Apache Maven&lt;/a&gt; &amp;gt;=3.3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.springsource.org/&quot;&gt;熟悉Spring框架&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;互联网连接&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;根据配置组件的选择，可能还有其他要求，例如LDAP目录，数据库和缓存基础结构。但是，在大多数情况下，对于选择具有明确硬件和软件依赖性的组件的部署者来说，要求应该是不言而喻的。在任何其他要求不明显的情况下，组件配置的讨论应该提到系统，软件，硬件和其他要求。&lt;/p&gt;

&lt;h3 id=&quot;servlet容器&quot;&gt;Servlet容器&lt;/h3&gt;

&lt;p&gt;CAS没有官方支持的servlet容器，但&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Apache Tomcat&lt;/a&gt;是最常用的。对特定servlet容器的支持取决于社区成员的专业知识，但已知以下工作正常并且应该获得&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/Mailing-Lists.html&quot;&gt;社区讨论邮件列表&lt;/a&gt;的优先支持：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jboss.org/&quot;&gt;JBoss&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://glassfish.java.net/&quot;&gt;GlassFish&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibm.com/software/websphere/&quot;&gt;WebSphere&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apache-maven&quot;&gt;Apache Maven&lt;/h3&gt;

&lt;p&gt;CAS使用Maven构建和创建可部署的软件包，以便安装到Java servlet容器中。强烈建议使用Maven进行CAS安装过程所需的配置管理。 CAS基本上是一个复杂的软件产品，它嵌入并紧密集成到机构的软件环境中。因此，它倾向于要求定制远远超出交钥匙解决方案，并且集成要求往往会随着时间的推移而变化。像&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/installation/Maven-Overlay-Installation.html&quot;&gt;Maven WAR overlay&lt;/a&gt;这样的基于源的安装过程为复杂和动态的需求提供了直接而灵活的解决方案。虽然它确实需要高昂的前期学习成本，但从长远来看，它可以获得许多好处&lt;/p&gt;

&lt;h3 id=&quot;互联网连接&quot;&gt;互联网连接&lt;/h3&gt;

&lt;p&gt;任何基于Maven的项目的构建阶段通常都需要Internet连接，包括用于安装CAS的推荐Maven WAR覆盖。 Maven通过搜索包含本地下载和安装的工件（大多数情况下为jar文件）的在线存储库来解析依赖关系。虽然可以通过替换Maven配置设置来覆盖此行为，但它被视为高级用法，不受支持。&lt;/p&gt;

&lt;p&gt;克服CAS服务器上缺少Internet连接的常见解决方案是在具有Internet连接的专用构建主机上构建CAS。随后将构建生成的cas.war文件复制到CAS服务器以进行部署。&lt;/p&gt;

&lt;h2 id=&quot;安全指南&quot;&gt;安全指南&lt;/h2&gt;

&lt;p&gt;CAS是一种安全软件，可为基于Web的应用程序提供基于Web的安全单点登录。单点登录在安全性和便利性方面提供了双赢：它减少了对单个受信任凭证代理的密码暴露，同时透明地提供对多个服务的访问而无需重复登录。 CAS的使用通常会改善安全环境，但是应该考虑几种CAS配置，策略和部署问题以实现适当的安全性。&lt;/p&gt;

&lt;h3 id=&quot;系统安全注意事项&quot;&gt;系统安全注意事项&lt;/h3&gt;

&lt;h4 id=&quot;安全传输https&quot;&gt;安全传输（https）&lt;/h4&gt;

&lt;p&gt;与CAS服务器的所有通信必须通过安全信道（即TLSv1）进行。此要求有两个主要理由：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;身份验证过程需要传输安全凭据。&lt;/li&gt;
  &lt;li&gt;CAS票证授予票证是不记名令牌。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于任一数据的公开都会允许冒充攻击，因此保护CAS客户端和CAS服务器之间的通信通道至关重要。&lt;/p&gt;

&lt;p&gt;实际上，这意味着所有CAS URL必须使用HTTPS，但这也意味着必须使用HTTPS完成从CAS服务器到应用程序的所有连接：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当生成的服务票据被发送回“服务”URL上的应用程序时。&lt;/li&gt;
  &lt;li&gt;当调用代理回调网址时。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;与依赖系统的连接&quot;&gt;与依赖系统的连接&lt;/h4&gt;

&lt;p&gt;CAS通常需要连接到其他系统，例如LDAP目录，数据库和缓存服务。我们通常建议在可能的情况下对这些系统使用安全传输（SSL / TLS，IPSec），但可能存在补偿性控制，这使得安全传输成为必要。具有严格访问控制的专用网络和企业网络是常见的例外情况，但仍建议使用安全传输。客户端认证验证可以是LDAP提供足够安全性的另一个好方案。&lt;/p&gt;

&lt;p&gt;如前所述，必须确保与其他系统的连接。但是，如果CAS服务器部署在多个节点上，则同样适用于CAS服务器本身。如果基于缓存的故障单注册表在单个CAS服务器上运行时没有任何安全问题，则在网络未受保护时使用多个节点时，同步可能会成为安全问题。&lt;/p&gt;

&lt;p&gt;如果没有正确保护，任何磁盘存储也都容易受到攻可以关闭EhCache溢出到磁盘以增加保护，而高级加密数据机制应该用于数据库磁盘存储。&lt;/p&gt;

&lt;h3 id=&quot;部署驱动的安全功能&quot;&gt;部署驱动的安全功能&lt;/h3&gt;

&lt;p&gt;CAS支持许多可用于实现各种安全策略的功能。通过CAS配置和CAS客户端集成提供以下功能。请注意，许多功能都是开箱即用的，而其他功能则需要显式设置。&lt;/p&gt;

&lt;h4 id=&quot;强制认证&quot;&gt;强制认证&lt;/h4&gt;

&lt;p&gt;许多CAS客户端和支持的协议支持强制身份验证的概念，用户必须重新进行身份验证才能访问特定服务。 CAS协议通过renew参数支持强制认证。强制身份验证为SSO会话的主体身份提供了额外的保证，因为用户必须在访问之前验证其凭据。强制认证适用于需要或强制要求更高安全性的服务。通常，强制身份验证是基于每个服务配置的，但是服务管理工具通过集中安全策略为实施强制身份验证提供了一些支持。强制认证可以与多因素认证特征组合以实现任意特定于服务的访问控制策略。&lt;/p&gt;

&lt;h4 id=&quot;被动认证&quot;&gt;被动认证&lt;/h4&gt;

&lt;p&gt;某些CAS协议支持被动身份验证，其中在请求时匿名授予对受CAS保护的服务的访问权限。 CASv2和CASv3协议通过网关功能支持此功能。被动认证补充了强制认证;强制身份验证需要身份验证才能访问服务，被动身份验证允许服务访问，尽管是匿名的，无需身份验证。&lt;/p&gt;

&lt;h4 id=&quot;代理验证&quot;&gt;代理验证&lt;/h4&gt;

&lt;p&gt;代理身份验证或委派身份验证提供了CAS的强大，重要且可能具有安全性的功能。 CASv2和CASv3协议支持代理身份验证，并由代表用户的服务请求的代理票证调解;因此，服务代理用户的认证。代理身份验证通常用于服务无法直接与用户交互的情况，也可用作将最终用户凭据重放到服务的替代方法。&lt;/p&gt;

&lt;p&gt;然而，代理票据存在风险，因为接受代理票据的服务负责验证代理链（最终用户的认证已经被委托到达票证验证服务的服务列表）。通过简单地针对/ serviceValidate验证端点验证票证，服务可以完全选择不接受代理票证（并避免验证代理链的责任），但是经验表明很容易对此进行混淆并配置为无意中使用/ proxyValidate端点不仔细检查故障单验证响应中出现的任何代理链。因此，代理身份验证需要仔细配置以进行适当的安如果不需要代理身份验证，建议在CAS服务器上禁用代理身份验证组件。&lt;/p&gt;

&lt;p&gt;过去，任何服务都可以获取代理授予票证，并从中获取代理票证以访问任何其他服务。换句话说，安全模型是分散的而不是集中的。服务管理设施通过暴露可以基于每个服务启用或禁用的代理验证标志来提供对代理验证的一些集中控制。默认情况下，注册服务未授予代理身份验证功能。&lt;/p&gt;

&lt;h4 id=&quot;多因素身份验证&quot;&gt;多因素身份验证&lt;/h4&gt;

&lt;p&gt;CAS以两种模式之一提供对多因素身份验证的支持：全局和单服务。登录表单上总是需要多个凭证的全局情况很简单：修改用户界面以接受多个凭证，并将身份验证组件配置为要求成功验证所有提供的凭据。&lt;/p&gt;

&lt;p&gt;单服务案例更有趣，更复杂：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;必须建立凭证和凭证组的身份保证级别（LOA）。&lt;/li&gt;
  &lt;li&gt;必须根据服务建立安全策略与凭证LOA。&lt;/li&gt;
  &lt;li&gt;必须通过服务管理工具配置服务访问策略。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前两项任务至关重要，但超出了本文档的范围。通过服务管理工具应用服务访问策略是通过声明必须成功验证凭证以允许访问的验证处理程序来实现的;例如，LDAP身份验证处理程序和RSA SecureID身份验证处理程序。&lt;/p&gt;

&lt;p&gt;由于多因素身份验证需要开发机构安全策略，高级组件配置（以及可能的自定义组件开发）和UI设计，因此应将其视为框架而非功能。有关配置问题和实施建议的详细讨论，请参阅多因素配置部分。&lt;/p&gt;

&lt;h4 id=&quot;凭据缓存和恢复&quot;&gt;凭据缓存和恢复&lt;/h4&gt;

&lt;p&gt;ClearPass扩展提供了一种机制，用于捕获主要身份验证凭据，对其进行缓存（加密），并根据需要恢复以访问旧服务。虽然建议使用代理身份验证代替密码重放，但可能需要将旧服务与CAS集成。有关详细信息，请参阅ClearPass文档。&lt;/p&gt;

&lt;h4 id=&quot;安全响应标头&quot;&gt;安全响应标头&lt;/h4&gt;

&lt;p&gt;作为CAS安全筛选器的一部分，CAS项目自动提供必要的配置，以将HTTP安全标头插入Web响应中，以防止HSTS，XSS，X-FRAME和其他攻击。默认情况下，这些设置目前处于关闭状态，可通过以下设置启用：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# httpresponse.header.cache=false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# httpresponse.header.hsts=false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# httpresponse.header.xframe=false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# httpresponse.header.xcontent=false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# httpresponse.header.xss=false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要查看并了解有关这些选项的更多信息，请访问此&lt;a href=&quot;https://github.com/apereo/cas-server-security-filter&quot;&gt;指南&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;高可用性指南ha-群集&quot;&gt;高可用性指南(HA /群集)&lt;/h2&gt;

&lt;p&gt;高度可用的CAS部署是为了响应各种故障模式而提供弹性的部署，以便尽管出现故障，CAS仍继续提供SSO服务。我们提供推荐的体系结构，为规划和执行符合机构性能和可用性要求的CAS部署提供了一个起点。它还提供了一个框架，用于理解由HA考虑因素强加的CAS软件组件要求。&lt;/p&gt;

&lt;p&gt;通过确保有足够的冗余来实现CAS的高可用性（HA）配置，以便在面对组件故障时服务是稳健的，并且可以在没有服务停机的情况下完成日常维护。这可以通过多节点实现，在较小程度上可以通过具有高级虚拟机功能的单节点CAS实现。本文档将重点介绍实现HA所需的CAS Server组件。对HA配置的更加定量的分析取决于支持基础设施和服务，超出了本文档的范围。&lt;/p&gt;

&lt;p&gt;CAS服务器软件具有非常可靠的良好记录。但是，CAS服务器只是软件和硬件的一小部分，认证必须遍历才能顺利运行。集群通常使用集群，不仅用于负载处理，还用于故障转移。即使没有发生故障，有时也需要重新启动服务器。例如，如果安装了操作系统级别的严重安全修复程序，则应立即重新启动服务器。在CAS服务器集群中，即使在最繁忙的时间，也可以通过滚动重启轻松完成。&lt;/p&gt;

&lt;p&gt;传统上操作单个服务器会延迟重启，直到较不繁忙的时间，同时运行已知漏洞。然而，最近随着虚拟机技术的日益接受及其固有的冗余和容错性，单节点CAS已经能够实现类似的质量。&lt;/p&gt;

&lt;h3 id=&quot;推荐架构&quot;&gt;推荐架构&lt;/h3&gt;

&lt;p&gt;下图突出显示了高可用CAS部署的重要方面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://apereo.github.io/cas/4.2.x/images/recommended_ha_architecture.png&quot;&gt;CAS集群架构&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;值得指出这种架构的一些重要特征：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从属系统可以容忍多达N-1个节点故障。 （其中N是节点总数。）&lt;/li&gt;
  &lt;li&gt;CAS本身可以容忍多达N-1个节点故障。&lt;/li&gt;
  &lt;li&gt;丢失缓存节点不会导致复制缓存中的SSO状态数据（即票据）丢失。&lt;/li&gt;
  &lt;li&gt;丢失缓存节点可能导致非复制缓存中的SSO状态数据丢失（例如，memcached）。&lt;/li&gt;
  &lt;li&gt;SSO状态数据的丢失始终是优雅的：用户只需重新进行身份验证。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在详细讨论推荐架构的各个方面之前，我们提供了规划高可用性部署的指导原则：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;追求简单
设计满足性能和可用性要求的最简单解决方案。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经验表明，简单性是成功和强大的HA部署的重要系统特征。力求简洁，您将获得良好的服务。&lt;/p&gt;</content><author><name>chenqy9</name><email>chenqy9@foxmail.com</email></author><category term="CAS" /><category term="单点登录" /><category term="入门" /><summary type="html">企业单点登录 - CAS提供友好的开源社区，积极支持并为项目做出贡献。虽然该项目植根于高级开放源代码，但它已发展成为跨越财富500强企业和小型专用设备的国际受众。</summary></entry></feed>